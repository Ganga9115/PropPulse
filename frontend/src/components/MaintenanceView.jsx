// frontend/MaintenanceView.jsx

import React, { useState, useEffect, useCallback } from "react";
import { useNavigate } from "react-router-dom";
import axios from 'axios';
import Sidebar from "./Sidebar";
import "../styles/MaintenanceView.css";
import maintenanceImg from "../assets/maintenances1.png"; // Placeholder image

axios.defaults.baseURL = 'http://localhost:5000'; 

const MaintenanceView = () => {
Â  Â  const navigate = useNavigate();
Â  Â  const [requests, setRequests] = useState([]);
Â  Â  const [loading, setLoading] = useState(true);
Â  Â  
Â  Â  // Placeholder: Replace '1' with the actual authenticated tenant ID
Â  Â  const tenantId = 1; 

Â  Â  const fetchRequests = useCallback(async () => {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  setLoading(true);
Â  Â  Â  Â  Â  Â  const response = await axios.get(`/api/maintenance/tenant/${tenantId}`);
Â  Â  Â  Â  Â  Â  setRequests(response.data);
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  console.error("Error fetching maintenance requests:", error);
Â  Â  Â  Â  Â  Â  alert("Failed to load maintenance status.");
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  }
Â  Â  }, [tenantId]);

Â  Â  useEffect(() => {
Â  Â  Â  Â  fetchRequests();
Â  Â  }, [fetchRequests]);
Â  Â  
Â  Â  // Helper to format the status badge class (e.g., 'In Progress' -> 'in-progress')
Â  Â  const getStatusClass = (status) => {
Â  Â  Â  Â  if (!status) return 'pending';
Â  Â  Â  Â  return status.toLowerCase().replace(' ', '-');
Â  Â  };

Â  Â  const handleViewRequest = (requestId) => {
Â  Â  Â  Â  // Navigate to a detailed view of the request
Â  Â  Â  Â  navigate(`/maintenance/${requestId}`);
Â  Â  };

Â  Â  const renderRequestCard = (request) => {
Â  Â  Â  Â  const visitDate = request.expectedVisit ? new Date(request.expectedVisit) : null;
Â  Â  Â  Â  
Â  Â  Â  Â  // Determine if the status badge should be a clickable button
Â  Â  Â  Â  const isActionButton = request.status === 'Open' || request.status === 'Assigned' || request.status === 'In Progress';
Â  Â  Â  Â  
Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  Â  <div className="request-card" key={request.id}>
Â  Â  Â  Â  Â  Â  Â  Â  <div className="request-header">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="request-id">Request ID: {request.maintenanceId || `MR-${request.id}`}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Render status as a Button if actionable, otherwise a Span badge */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {isActionButton ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`status-badge ${getStatusClass(request.status)}`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleViewRequest(request.id)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {request.status}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className={`status-badge ${getStatusClass(request.status)}`}>{request.status}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  <div className="request-body">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="request-title">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Title: "{request.title}"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {request.assignedTo && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ðŸ”§ Assigned to vendor: <strong>{request.assignedTo}</strong>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {visitDate && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ðŸ“… Expected visit: {visitDate.toLocaleDateString()} at {visitDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {!request.assignedTo && request.status === 'Open' && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p>Waiting for admin review and vendor assignment...</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  );
Â  Â  }
Â  Â  
Â  Â  if (loading) {
Â  Â  Â  Â  return <div className="maintenance-layout"><Sidebar /><div className="dashboard">Loading Status...</div></div>;
Â  Â  }

Â  Â  return (
Â  Â  Â  Â  <div className="maintenance-layout">
Â  Â  Â  Â  Â  Â  <Sidebar />
Â  Â  Â  Â  Â  Â  <div className="dashboard">
Â  Â  Â  Â  Â  Â  Â  Â  <div className="dashboard-header">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h1>Hello Tenant!</h1>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Access all your rental details, payment history, and support in one place
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  <div className="maintenance-content">
                    {/* NEW: Container for Header Text and Illustration */}
                    <div className="header-and-illustration">
                        <div className="maintenance-header">
                            <h2>Maintenance Status</h2>
                            <p>Track the progress of your maintenance requests below.</p>
                            <div className="maintenance-actions">
                                <button
                                    className="btn raise-btn"
                                    onClick={() => navigate("/maintenance/new")}
                                >
                                    âž• Raise New Request
                                </button>
                            </div>
                        </div>
                        
                        {/* Illustration is now next to the header, not the request list */}
                        <div className="illustration">
                            <img src={maintenanceImg} alt="Maintenance worker" />
                        </div>
                    </div>
                    {/* END NEW CONTAINER */}

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="legend">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="open">Open</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="assigned">Assigned</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="in-progress">Progress</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="completed">Completed</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* The list now uses the full width */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="request-list">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {requests.length > 0 ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  requests.map(renderRequestCard)
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p>You have no submitted maintenance requests.</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  );
};

export default MaintenanceView;